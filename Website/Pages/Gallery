
import React, { useState, useEffect } from "react";
import { Gallery } from "@/entities/all";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { MapPin, Filter, Camera, Grid3X3 } from "lucide-react";

export default function GalleryPage() {
  const [photos, setPhotos] = useState([]);
  const [filteredPhotos, setFilteredPhotos] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [loading, setLoading] = useState(true);
  const [selectedPhoto, setSelectedPhoto] = useState(null);

  const categories = [
    { value: "all", label: "All Photos" },
    { value: "racing", label: "Racing" },
    { value: "bike", label: "Bike Shots" },
    { value: "lifestyle", label: "Lifestyle" },
    { value: "behind_scenes", label: "Behind Scenes" },
    { value: "events", label: "Events" }
  ];

  // Effect to load photos on component mount
  useEffect(() => {
    const loadPhotos = async () => {
      const data = await Gallery.list('-created_date');
      setPhotos(data);
      setLoading(false);
    };
    loadPhotos();
  }, []); // Empty dependency array means this runs once on mount. 'loadPhotos' is defined inside the effect to avoid dependency warnings.

  // Effect to filter photos whenever the 'photos' or 'selectedCategory' state changes
  useEffect(() => {
    if (selectedCategory === "all") {
      setFilteredPhotos(photos);
    } else {
      setFilteredPhotos(photos.filter(photo => photo.category === selectedCategory));
    }
  }, [photos, selectedCategory]); // Dependencies ensure this effect re-runs when needed.

  return (
    <div className="min-h-screen bg-gray-900 text-white py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-6xl font-bold mb-4">
            <span className="bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent">
              Photo Gallery
            </span>
          </h1>
          <p className="text-xl text-gray-400 max-w-2xl mx-auto">
            Behind-the-scenes moments, race day action, and life in the motocross world
          </p>
        </div>

        {/* Filter */}
        <div className="bg-gray-800 rounded-xl p-6 mb-8">
          <div className="flex items-center justify-center gap-4">
            <Filter className="w-5 h-5 text-gray-400" />
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-64 bg-gray-700 border-gray-600 text-white">
                <SelectValue placeholder="Filter by category" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem key={category.value} value={category.value}>
                    {category.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Photos Grid */}
        {loading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {Array(12).fill(0).map((_, i) => (
              <div key={i} className="aspect-square bg-gray-800 rounded-xl animate-pulse"></div>
            ))}
          </div>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {filteredPhotos.map((photo) => (
                <Card 
                  key={photo.id}
                  className="bg-gray-800 border-gray-700 overflow-hidden hover:shadow-xl transition-all duration-300 group cursor-pointer"
                  onClick={() => setSelectedPhoto(photo)}
                >
                  <div className="aspect-square relative overflow-hidden">
                    <img 
                      src={photo.image_url}
                      alt={photo.title}
                      className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    
                    <Badge 
                      className="absolute top-3 left-3 bg-orange-500/90 text-white backdrop-blur-sm"
                    >
                      {photo.category?.replace('_', ' ').toUpperCase()}
                    </Badge>
                    
                    <div className="absolute bottom-0 left-0 right-0 p-4 transform translate-y-full group-hover:translate-y-0 transition-transform duration-300">
                      <h3 className="text-white font-semibold mb-1">{photo.title}</h3>
                      {photo.location && (
                        <div className="flex items-center text-gray-300 text-sm">
                          <MapPin className="w-3 h-3 mr-1" />
                          {photo.location}
                        </div>
                      )}
                    </div>
                  </div>
                </Card>
              ))}
            </div>

            {filteredPhotos.length === 0 && !loading && (
              <div className="text-center py-12">
                <div className="w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Camera className="w-12 h-12 text-gray-600" />
                </div>
                <h3 className="text-xl font-semibold text-gray-400 mb-2">No photos found</h3>
                <p className="text-gray-500">
                  Try selecting a different category filter
                </p>
              </div>
            )}
          </>
        )}

        {/* Photo Modal */}
        {selectedPhoto && (
          <div 
            className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center p-4"
            onClick={() => setSelectedPhoto(null)}
          >
            <div className="max-w-4xl max-h-full relative" onClick={(e) => e.stopPropagation()}>
              <img 
                src={selectedPhoto.image_url}
                alt={selectedPhoto.title}
                className="max-w-full max-h-full object-contain rounded-lg"
              />
              <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 rounded-b-lg">
                <div className="flex items-center justify-between mb-2">
                  <Badge className="bg-orange-500 text-white">
                    {selectedPhoto.category?.replace('_', ' ').toUpperCase()}
                  </Badge>
                  <button 
                    onClick={() => setSelectedPhoto(null)}
                    className="text-white hover:text-gray-300 text-xl font-bold"
                  >
                    âœ•
                  </button>
                </div>
                <h3 className="text-xl font-semibold text-white mb-2">{selectedPhoto.title}</h3>
                {selectedPhoto.description && (
                  <p className="text-gray-300 mb-2">{selectedPhoto.description}</p>
                )}
                {selectedPhoto.location && (
                  <div className="flex items-center text-gray-400 text-sm">
                    <MapPin className="w-4 h-4 mr-2" />
                    {selectedPhoto.location}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
